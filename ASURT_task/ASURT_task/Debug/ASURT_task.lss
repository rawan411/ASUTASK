
ASURT_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000234  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000375  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001077  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006b3  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000597  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000dc  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d0  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000751  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000028e  0000028e  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000007c  00000180  00000180  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.mdio_pinStatus 000000d2  000000ae  000000ae  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.mdio_getPinValue 0000004a  000001fc  000001fc  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.muart_init 00000016  00000278  00000278  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.muart_sendByte 00000032  00000246  00000246  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.timeout_var 00000001  00800060  00800060  00000346  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
   8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
   c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
  50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000028e <__bad_interrupt>:
 28e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000180 <main>:
#define F_CPU 16000000UL

int main(void)
{
	
	mdio_pinStatus(PORTA,PIN0,INPUT_PULLUP);
 180:	42 e0       	ldi	r20, 0x02	; 2
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	mdio_pinStatus(PORTA,PIN1,INPUT_PULLUP);
 18a:	42 e0       	ldi	r20, 0x02	; 2
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 	mdio_pinStatus(PORTA,PIN2,INPUT_PULLUP);
 194:	42 e0       	ldi	r20, 0x02	; 2
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>

	mdio_pinStatus(PORTB,PIN0,OUTPUT); 
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>

 	mdio_pinStatus(PORTB,PIN1,OUTPUT);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 	mdio_pinStatus(PORTB,PIN2,OUTPUT);
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 	
 	muart_init(MUART_9600BPS);
 1bc:	87 e6       	ldi	r24, 0x67	; 103
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 3c 01 	call	0x278	; 0x278 <muart_init>
	
    while(1)
    {
		
		if(mdio_getPinValue(PORTA,PIN0) == LOW)
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mdio_getPinValue>
 1cc:	81 11       	cpse	r24, r1
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <main+0x56>
		{
			
			muart_sendByte('a');
 1d0:	81 e6       	ldi	r24, 0x61	; 97
 1d2:	0e 94 23 01 	call	0x246	; 0x246 <muart_sendByte>
		}
		if(mdio_getPinValue(PORTA,PIN1) == LOW)
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mdio_getPinValue>
 1de:	81 11       	cpse	r24, r1
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <main+0x68>
		{
			muart_sendByte('b');
 1e2:	82 e6       	ldi	r24, 0x62	; 98
 1e4:	0e 94 23 01 	call	0x246	; 0x246 <muart_sendByte>
		}
		if(mdio_getPinValue(PORTA,PIN2) == LOW)
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mdio_getPinValue>
 1f0:	81 11       	cpse	r24, r1
 1f2:	e8 cf       	rjmp	.-48     	; 0x1c4 <main+0x44>
		{
			muart_sendByte('c');
 1f4:	83 e6       	ldi	r24, 0x63	; 99
 1f6:	0e 94 23 01 	call	0x246	; 0x246 <muart_sendByte>
 1fa:	e4 cf       	rjmp	.-56     	; 0x1c4 <main+0x44>

Disassembly of section .text.mdio_pinStatus:

000000ae <mdio_pinStatus>:
		case PORTC:
			MDIO_PORTC ^= pin;
			break;
		
		case PORTD:
			MDIO_PORTD ^= pin;
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	f9 f0       	breq	.+62     	; 0xf0 <mdio_pinStatus+0x42>
  b2:	30 f0       	brcs	.+12     	; 0xc0 <mdio_pinStatus+0x12>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	a1 f1       	breq	.+104    	; 0x120 <mdio_pinStatus+0x72>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <mdio_pinStatus+0x10>
  bc:	49 c0       	rjmp	.+146    	; 0x150 <mdio_pinStatus+0xa2>
  be:	08 95       	ret
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	41 f0       	breq	.+16     	; 0xd4 <mdio_pinStatus+0x26>
  c4:	18 f0       	brcs	.+6      	; 0xcc <mdio_pinStatus+0x1e>
  c6:	42 30       	cpi	r20, 0x02	; 2
  c8:	51 f0       	breq	.+20     	; 0xde <mdio_pinStatus+0x30>
  ca:	08 95       	ret
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	68 2b       	or	r22, r24
  d0:	6a bb       	out	0x1a, r22	; 26
  d2:	08 95       	ret
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	60 95       	com	r22
  d8:	68 23       	and	r22, r24
  da:	6a bb       	out	0x1a, r22	; 26
  dc:	08 95       	ret
  de:	8a b3       	in	r24, 0x1a	; 26
  e0:	96 2f       	mov	r25, r22
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	68 2b       	or	r22, r24
  ec:	6b bb       	out	0x1b, r22	; 27
  ee:	08 95       	ret
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	41 f0       	breq	.+16     	; 0x104 <mdio_pinStatus+0x56>
  f4:	18 f0       	brcs	.+6      	; 0xfc <mdio_pinStatus+0x4e>
  f6:	42 30       	cpi	r20, 0x02	; 2
  f8:	51 f0       	breq	.+20     	; 0x10e <mdio_pinStatus+0x60>
  fa:	08 95       	ret
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	68 2b       	or	r22, r24
 100:	67 bb       	out	0x17, r22	; 23
 102:	08 95       	ret
 104:	87 b3       	in	r24, 0x17	; 23
 106:	60 95       	com	r22
 108:	68 23       	and	r22, r24
 10a:	67 bb       	out	0x17, r22	; 23
 10c:	08 95       	ret
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	96 2f       	mov	r25, r22
 112:	90 95       	com	r25
 114:	89 23       	and	r24, r25
 116:	87 bb       	out	0x17, r24	; 23
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	68 2b       	or	r22, r24
 11c:	68 bb       	out	0x18, r22	; 24
 11e:	08 95       	ret
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	41 f0       	breq	.+16     	; 0x134 <mdio_pinStatus+0x86>
 124:	18 f0       	brcs	.+6      	; 0x12c <mdio_pinStatus+0x7e>
 126:	42 30       	cpi	r20, 0x02	; 2
 128:	51 f0       	breq	.+20     	; 0x13e <mdio_pinStatus+0x90>
 12a:	08 95       	ret
 12c:	84 b3       	in	r24, 0x14	; 20
 12e:	68 2b       	or	r22, r24
 130:	64 bb       	out	0x14, r22	; 20
 132:	08 95       	ret
 134:	8a b3       	in	r24, 0x1a	; 26
 136:	60 95       	com	r22
 138:	68 23       	and	r22, r24
 13a:	6a bb       	out	0x1a, r22	; 26
 13c:	08 95       	ret
 13e:	84 b3       	in	r24, 0x14	; 20
 140:	96 2f       	mov	r25, r22
 142:	90 95       	com	r25
 144:	89 23       	and	r24, r25
 146:	84 bb       	out	0x14, r24	; 20
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	68 2b       	or	r22, r24
 14c:	65 bb       	out	0x15, r22	; 21
 14e:	08 95       	ret
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	41 f0       	breq	.+16     	; 0x164 <mdio_pinStatus+0xb6>
 154:	18 f0       	brcs	.+6      	; 0x15c <mdio_pinStatus+0xae>
 156:	42 30       	cpi	r20, 0x02	; 2
 158:	51 f0       	breq	.+20     	; 0x16e <mdio_pinStatus+0xc0>
 15a:	08 95       	ret
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	68 2b       	or	r22, r24
 160:	62 bb       	out	0x12, r22	; 18
 162:	08 95       	ret
 164:	82 b3       	in	r24, 0x12	; 18
 166:	60 95       	com	r22
 168:	68 23       	and	r22, r24
 16a:	62 bb       	out	0x12, r22	; 18
 16c:	08 95       	ret
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	96 2f       	mov	r25, r22
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	82 bb       	out	0x12, r24	; 18
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	68 2b       	or	r22, r24
 17c:	62 bb       	out	0x12, r22	; 18
 17e:	08 95       	ret

Disassembly of section .text.mdio_getPinValue:

000001fc <mdio_getPinValue>:
/*this function is responsible for getting pin for a dedicated value */
u8_t mdio_getPinValue(u8_t port,u8_t pin)//input
{
	u8_t pinValue;
	/*Switching over DIO PORTs*/
	switch(port)
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	59 f0       	breq	.+22     	; 0x216 <mdio_getPinValue+0x1a>
 200:	28 f0       	brcs	.+10     	; 0x20c <mdio_getPinValue+0x10>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	69 f0       	breq	.+26     	; 0x220 <mdio_getPinValue+0x24>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	81 f0       	breq	.+32     	; 0x22a <mdio_getPinValue+0x2e>
 20a:	1b c0       	rjmp	.+54     	; 0x242 <mdio_getPinValue+0x46>
	{
		case PORTA:
		/*switching over DIO pin status*/
			if(MDIO_PINA & pin)
 20c:	89 b3       	in	r24, 0x19	; 25
 20e:	68 23       	and	r22, r24
 210:	89 f0       	breq	.+34     	; 0x234 <mdio_getPinValue+0x38>
			{
				pinValue=HIGH;		
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	16 c0       	rjmp	.+44     	; 0x242 <mdio_getPinValue+0x46>
			}
			break;
		
		case PORTB:
			/*switching over DIO pin status*/
			if(MDIO_PINB & pin)
 216:	86 b3       	in	r24, 0x16	; 22
 218:	68 23       	and	r22, r24
 21a:	71 f0       	breq	.+28     	; 0x238 <mdio_getPinValue+0x3c>
			{
				pinValue=HIGH;
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	11 c0       	rjmp	.+34     	; 0x242 <mdio_getPinValue+0x46>
			break;
			
		
		case PORTC:
		/*switching over DIO pin status*/
			if(MDIO_PINC & pin)
 220:	83 b3       	in	r24, 0x13	; 19
 222:	68 23       	and	r22, r24
 224:	59 f0       	breq	.+22     	; 0x23c <mdio_getPinValue+0x40>
			{
				pinValue=HIGH;
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0c c0       	rjmp	.+24     	; 0x242 <mdio_getPinValue+0x46>
			}
			break;
		
		case PORTD:
			/*switching over DIO pin status*/
			if(MDIO_PIND & pin)
 22a:	80 b3       	in	r24, 0x10	; 16
 22c:	68 23       	and	r22, r24
 22e:	41 f0       	breq	.+16     	; 0x240 <mdio_getPinValue+0x44>
			{
				pinValue=HIGH;
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	07 c0       	rjmp	.+14     	; 0x242 <mdio_getPinValue+0x46>
			{
				pinValue=HIGH;		
			}
			else
			{
				pinValue=LOW;
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	05 c0       	rjmp	.+10     	; 0x242 <mdio_getPinValue+0x46>
			{
				pinValue=HIGH;
			}
			else
			{
				pinValue=LOW;
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	03 c0       	rjmp	.+6      	; 0x242 <mdio_getPinValue+0x46>
			{
				pinValue=HIGH;
			}
			else
			{
				pinValue=LOW;
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 c0       	rjmp	.+2      	; 0x242 <mdio_getPinValue+0x46>
			{
				pinValue=HIGH;
			}
			else
			{
				pinValue=LOW;
 240:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
	}
	
	return pinValue;
}
 242:	89 2f       	mov	r24, r25
 244:	08 95       	ret

Disassembly of section .text.muart_init:

00000278 <muart_init>:

/*this function is responsible for initializing uart*/
void muart_init(u16_t baudrate)
{
	/*Enable TX and Rx*/
	SET_BIT(MUART_UCSRB,4);
 278:	2a b1       	in	r18, 0x0a	; 10
 27a:	20 61       	ori	r18, 0x10	; 16
 27c:	2a b9       	out	0x0a, r18	; 10
	SET_BIT(MUART_UCSRB,3);
 27e:	2a b1       	in	r18, 0x0a	; 10
 280:	28 60       	ori	r18, 0x08	; 8
 282:	2a b9       	out	0x0a, r18	; 10
	
	/*choosing Asynchronous mode ,disable Parity ,data length 8-bit*/
	MUART_UCSRC =(0x80)| (0x06);
 284:	26 e8       	ldi	r18, 0x86	; 134
 286:	20 bd       	out	0x20, r18	; 32
	
	/*casting the baudrate and set the low baud rate*/
	MUART_UBRRL =(u8_t)baudrate;
 288:	89 b9       	out	0x09, r24	; 9
	
	/*setting the high baud rate*/
	MUART_UBRRH =(u8_t)(baudrate>>8); 
 28a:	90 bd       	out	0x20, r25	; 32
 28c:	08 95       	ret

Disassembly of section .text.muart_sendByte:

00000246 <muart_sendByte>:
}

/*this function is responsible for sending  the data*/
void muart_sendByte(u8_t data)
{
	timeout_var=0;
 246:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*checking if UDR Empty or not*/
	if(GET_BIT(MUART_UCSRA , 5) == 1)
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	14 c0       	rjmp	.+40     	; 0x276 <muart_sendByte+0x30>
	{
		/*Transmitting data*/
		MUART_UDR=data;
 24e:	8c b9       	out	0x0c, r24	; 12
		
		/*make sure that the data has been transmitted or timeout have been happened*/
		while(GET_BIT(MUART_UCSRA , 6)==0 && timeout_var <10)/*Pulling system*/
 250:	09 c0       	rjmp	.+18     	; 0x264 <muart_sendByte+0x1e>
		{
			
			timeout_var++;
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	8f e9       	ldi	r24, 0x9F	; 159
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <muart_sendByte+0x16>
 260:	00 c0       	rjmp	.+0      	; 0x262 <muart_sendByte+0x1c>
 262:	00 00       	nop
	{
		/*Transmitting data*/
		MUART_UDR=data;
		
		/*make sure that the data has been transmitted or timeout have been happened*/
		while(GET_BIT(MUART_UCSRA , 6)==0 && timeout_var <10)/*Pulling system*/
 264:	5e 99       	sbic	0x0b, 6	; 11
 266:	04 c0       	rjmp	.+8      	; 0x270 <muart_sendByte+0x2a>
 268:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26c:	8a 30       	cpi	r24, 0x0A	; 10
 26e:	88 f3       	brcs	.-30     	; 0x252 <muart_sendByte+0xc>
			
			timeout_var++;
			_delay_ms(1);
		}	
		/*clearing Tx flag*/
		SET_BIT(MUART_UCSRA,6);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8b b9       	out	0x0b, r24	; 11
 276:	08 95       	ret
