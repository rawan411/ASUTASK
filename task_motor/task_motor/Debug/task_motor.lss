
task_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000030e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  0000033d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001118  00000000  00000000  000003cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006cf  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005b9  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d2  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000799  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002b6  000002b6  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    000000a2  0000017a  0000017a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.mdio_pinStatus 000000d2  000000a8  000000a8  000000fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.mdio_setPinValue 00000078  0000021c  0000021c  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.muart_init 00000016  00000294  00000294  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.muart_reciveByte 0000000c  000002aa  000002aa  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
   8:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
   c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  10:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  14:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  18:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  1c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  20:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  24:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  28:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  2c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  30:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  34:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  38:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  3c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  40:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  44:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  48:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  4c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>
  50:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  a0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

000002b6 <__bad_interrupt>:
 2b6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000017a <main>:
#include "LBIT_MATH.h"

#define F_CPU 16000000UL

int main(void)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	1f 92       	push	r1
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	mdio_pinStatus(PORTA,PIN0,OUTPUT);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
	mdio_pinStatus(PORTA,PIN1,OUTPUT);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
	mdio_pinStatus(PORTA,PIN2,OUTPUT);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	64 e0       	ldi	r22, 0x04	; 4
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
	
	muart_init(MUART_9600BPS);
 1a2:	87 e6       	ldi	r24, 0x67	; 103
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 4a 01 	call	0x294	; 0x294 <muart_init>
	u8_t recieve_var;
    while(1)
    {
		
		muart_reciveByte(&recieve_var);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 55 01 	call	0x2aa	; 0x2aa <muart_reciveByte>
		if(recieve_var == 'a')
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	81 36       	cpi	r24, 0x61	; 97
 1b6:	81 f4       	brne	.+32     	; 0x1d8 <main+0x5e>
		{
			mdio_setPinValue(PORTA,PIN0,HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN1,LOW);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN2,HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
 1d6:	e9 cf       	rjmp	.-46     	; 0x1aa <main+0x30>
		}
		else if(recieve_var == 'b')
 1d8:	82 36       	cpi	r24, 0x62	; 98
 1da:	81 f4       	brne	.+32     	; 0x1fc <main+0x82>
		{
			mdio_setPinValue(PORTA,PIN0,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN1,HIGH);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN2,HIGH);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
 1fa:	d7 cf       	rjmp	.-82     	; 0x1aa <main+0x30>
			
		}
		else
		{
			mdio_setPinValue(PORTA,PIN0,LOW);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN1,LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
			mdio_setPinValue(PORTA,PIN2,LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	64 e0       	ldi	r22, 0x04	; 4
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 0e 01 	call	0x21c	; 0x21c <mdio_setPinValue>
 21a:	c7 cf       	rjmp	.-114    	; 0x1aa <main+0x30>

Disassembly of section .text.mdio_pinStatus:

000000a8 <mdio_pinStatus>:
@to set a specified bit |=  to clear specified bit &= ~
*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	/*Switching over DIO PORTs*/
	switch(port)
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	f9 f0       	breq	.+62     	; 0xea <mdio_pinStatus+0x42>
  ac:	30 f0       	brcs	.+12     	; 0xba <mdio_pinStatus+0x12>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	a1 f1       	breq	.+104    	; 0x11a <mdio_pinStatus+0x72>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <mdio_pinStatus+0x10>
  b6:	49 c0       	rjmp	.+146    	; 0x14a <mdio_pinStatus+0xa2>
  b8:	08 95       	ret
	{
		case PORTA:
			/*switching over DIO pin status*/
			switch(pin_status)
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	41 f0       	breq	.+16     	; 0xce <mdio_pinStatus+0x26>
  be:	18 f0       	brcs	.+6      	; 0xc6 <mdio_pinStatus+0x1e>
  c0:	42 30       	cpi	r20, 0x02	; 2
  c2:	51 f0       	breq	.+20     	; 0xd8 <mdio_pinStatus+0x30>
  c4:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRA |= pin;
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	68 2b       	or	r22, r24
  ca:	6a bb       	out	0x1a, r22	; 26
					break;
  cc:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	60 95       	com	r22
  d2:	68 23       	and	r22, r24
  d4:	6a bb       	out	0x1a, r22	; 26
					break;
  d6:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
  d8:	8a b3       	in	r24, 0x1a	; 26
  da:	96 2f       	mov	r25, r22
  dc:	90 95       	com	r25
  de:	89 23       	and	r24, r25
  e0:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	68 2b       	or	r22, r24
  e6:	6b bb       	out	0x1b, r22	; 27
					break;
  e8:	08 95       	ret
			}
		    break;	
		
		case PORTB:
			switch(pin_status)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	41 f0       	breq	.+16     	; 0xfe <mdio_pinStatus+0x56>
  ee:	18 f0       	brcs	.+6      	; 0xf6 <mdio_pinStatus+0x4e>
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	51 f0       	breq	.+20     	; 0x108 <mdio_pinStatus+0x60>
  f4:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRB |= pin;
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	68 2b       	or	r22, r24
  fa:	67 bb       	out	0x17, r22	; 23
					break;
  fc:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRB &= ~pin;
  fe:	87 b3       	in	r24, 0x17	; 23
 100:	60 95       	com	r22
 102:	68 23       	and	r22, r24
 104:	67 bb       	out	0x17, r22	; 23
					break;
 106:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRB &= ~pin;
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	96 2f       	mov	r25, r22
 10c:	90 95       	com	r25
 10e:	89 23       	and	r24, r25
 110:	87 bb       	out	0x17, r24	; 23
					MDIO_PORTB |= pin;
 112:	88 b3       	in	r24, 0x18	; 24
 114:	68 2b       	or	r22, r24
 116:	68 bb       	out	0x18, r22	; 24
					break;
 118:	08 95       	ret
			}
		    break;	
			
		case PORTC:
			switch(pin_status)
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	41 f0       	breq	.+16     	; 0x12e <mdio_pinStatus+0x86>
 11e:	18 f0       	brcs	.+6      	; 0x126 <mdio_pinStatus+0x7e>
 120:	42 30       	cpi	r20, 0x02	; 2
 122:	51 f0       	breq	.+20     	; 0x138 <mdio_pinStatus+0x90>
 124:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRC |= pin;
 126:	84 b3       	in	r24, 0x14	; 20
 128:	68 2b       	or	r22, r24
 12a:	64 bb       	out	0x14, r22	; 20
					break;
 12c:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	60 95       	com	r22
 132:	68 23       	and	r22, r24
 134:	6a bb       	out	0x1a, r22	; 26
					break;
 136:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRC &= ~pin;
 138:	84 b3       	in	r24, 0x14	; 20
 13a:	96 2f       	mov	r25, r22
 13c:	90 95       	com	r25
 13e:	89 23       	and	r24, r25
 140:	84 bb       	out	0x14, r24	; 20
					MDIO_PORTC |= pin;
 142:	85 b3       	in	r24, 0x15	; 21
 144:	68 2b       	or	r22, r24
 146:	65 bb       	out	0x15, r22	; 21
					break;
 148:	08 95       	ret
			}
		    break;
		
		case PORTD:
			switch(pin_status)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	41 f0       	breq	.+16     	; 0x15e <mdio_pinStatus+0xb6>
 14e:	18 f0       	brcs	.+6      	; 0x156 <mdio_pinStatus+0xae>
 150:	42 30       	cpi	r20, 0x02	; 2
 152:	51 f0       	breq	.+20     	; 0x168 <mdio_pinStatus+0xc0>
 154:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRD |= pin;
 156:	82 b3       	in	r24, 0x12	; 18
 158:	68 2b       	or	r22, r24
 15a:	62 bb       	out	0x12, r22	; 18
					break;
 15c:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRD &= ~pin;
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	62 bb       	out	0x12, r22	; 18
					break;
 166:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRD &= ~pin;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	96 2f       	mov	r25, r22
 16c:	90 95       	com	r25
 16e:	89 23       	and	r24, r25
 170:	82 bb       	out	0x12, r24	; 18
					MDIO_PORTD |= pin;
 172:	82 b3       	in	r24, 0x12	; 18
 174:	68 2b       	or	r22, r24
 176:	62 bb       	out	0x12, r22	; 18
 178:	08 95       	ret

Disassembly of section .text.mdio_setPinValue:

0000021c <mdio_setPinValue>:

/*this function is responsible for setting pin or pins for a dedicated value */
void mdio_setPinValue(u8_t port,u8_t pin,u8_t pin_value)//output
{
	/*Switching over DIO PORTs*/
	switch(port)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	99 f0       	breq	.+38     	; 0x246 <mdio_setPinValue+0x2a>
 220:	28 f0       	brcs	.+10     	; 0x22c <mdio_setPinValue+0x10>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	e9 f0       	breq	.+58     	; 0x260 <mdio_setPinValue+0x44>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	41 f1       	breq	.+80     	; 0x27a <mdio_setPinValue+0x5e>
 22a:	08 95       	ret
	{
		case PORTA:
		/*switching over DIO pin status*/
			switch(pin_value)
 22c:	44 23       	and	r20, r20
 22e:	31 f0       	breq	.+12     	; 0x23c <mdio_setPinValue+0x20>
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	79 f5       	brne	.+94     	; 0x292 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTA |= pin;
 234:	8b b3       	in	r24, 0x1b	; 27
 236:	68 2b       	or	r22, r24
 238:	6b bb       	out	0x1b, r22	; 27
					break;
 23a:	08 95       	ret
			
				case LOW:
					MDIO_PORTA &= ~pin;
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	60 95       	com	r22
 240:	68 23       	and	r22, r24
 242:	6b bb       	out	0x1b, r22	; 27
					break;
 244:	08 95       	ret
			}
			break;
		
		case PORTB:
		/*switching over DIO pin status*/
			switch(pin_value)
 246:	44 23       	and	r20, r20
 248:	31 f0       	breq	.+12     	; 0x256 <mdio_setPinValue+0x3a>
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	11 f5       	brne	.+68     	; 0x292 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTB |= pin;
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	68 2b       	or	r22, r24
 252:	68 bb       	out	0x18, r22	; 24
					break;
 254:	08 95       	ret
			
				case LOW:
					MDIO_PORTB &= ~pin;
 256:	88 b3       	in	r24, 0x18	; 24
 258:	60 95       	com	r22
 25a:	68 23       	and	r22, r24
 25c:	68 bb       	out	0x18, r22	; 24
					break;
 25e:	08 95       	ret
			}
			break;
		
		case PORTC:
		/*switching over DIO pin status*/
			switch(pin_value)
 260:	44 23       	and	r20, r20
 262:	31 f0       	breq	.+12     	; 0x270 <mdio_setPinValue+0x54>
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	a9 f4       	brne	.+42     	; 0x292 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTC |= pin;
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	68 2b       	or	r22, r24
 26c:	65 bb       	out	0x15, r22	; 21
					break;
 26e:	08 95       	ret
			
				case LOW:
					MDIO_PORTC &= ~pin;
 270:	85 b3       	in	r24, 0x15	; 21
 272:	60 95       	com	r22
 274:	68 23       	and	r22, r24
 276:	65 bb       	out	0x15, r22	; 21
					break;
 278:	08 95       	ret
			}
			break;
		
		case PORTD:
		/*switching over DIO pin status*/
			switch(pin_value)
 27a:	44 23       	and	r20, r20
 27c:	31 f0       	breq	.+12     	; 0x28a <mdio_setPinValue+0x6e>
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	41 f4       	brne	.+16     	; 0x292 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTD |= pin;
 282:	82 b3       	in	r24, 0x12	; 18
 284:	68 2b       	or	r22, r24
 286:	62 bb       	out	0x12, r22	; 18
					break;
 288:	08 95       	ret
			
				case LOW:
					MDIO_PORTD &= ~pin;
 28a:	82 b3       	in	r24, 0x12	; 18
 28c:	60 95       	com	r22
 28e:	68 23       	and	r22, r24
 290:	62 bb       	out	0x12, r22	; 18
 292:	08 95       	ret

Disassembly of section .text.muart_init:

00000294 <muart_init>:
			
			timeout_var++;
			_delay_ms(1);
		}	
		/*clearing Tx flag*/
		SET_BIT(MUART_UCSRA,6);
 294:	2a b1       	in	r18, 0x0a	; 10
 296:	20 61       	ori	r18, 0x10	; 16
 298:	2a b9       	out	0x0a, r18	; 10
 29a:	2a b1       	in	r18, 0x0a	; 10
 29c:	28 60       	ori	r18, 0x08	; 8
 29e:	2a b9       	out	0x0a, r18	; 10
 2a0:	26 e8       	ldi	r18, 0x86	; 134
 2a2:	20 bd       	out	0x20, r18	; 32
 2a4:	89 b9       	out	0x09, r24	; 9
 2a6:	90 bd       	out	0x20, r25	; 32
 2a8:	08 95       	ret

Disassembly of section .text.muart_reciveByte:

000002aa <muart_reciveByte>:

/*this function is responsible for receiving the data*/
void muart_reciveByte(u8_t* data)
{
	/*Checking that there's a new data or not*/
	if(GET_BIT(MUART_UCSRA,7)==1)
 2aa:	5f 9b       	sbis	0x0b, 7	; 11
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <muart_reciveByte+0xa>
	{
		/*Getting the new data*/
		*data = MUART_UDR;
 2ae:	2c b1       	in	r18, 0x0c	; 12
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	08 95       	ret
